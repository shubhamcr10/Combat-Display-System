name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake gcc g++ build-essential
        sudo apt-get install -y curl
        sudo apt-get install -y libssl-dev
        sudo apt-get install -y libasio-dev
        sudo apt-get install -y libtinyxml2-dev

    ## NO USE / DONT NEED CACHING (FOR NOW)
    # - name: Cache Micro XRCE-DDS Agent
    #   uses: actions/cache@v3
    #   with:
    #     path: /usr/local/bin/MicroXRCEAgent
    #     key: ${{ runner.os }}-xrce-agent-${{ hashFiles('Micro-XRCE-DDS-Agent/CMakeLists.txt') }}
    #     restore-keys: |
    #       ${{ runner.os }}-xrce-agent-

    # - name: Cache Micro XRCE-DDS Client
    #   uses: actions/cache@v3
    #   with:
    #     path: |
    #       /usr/local/lib/libmicroxrcedds_client.a
    #       /usr/local/include/uxr/client
    #       /usr/local/share/microxrcedds_client/cmake/
    #     key: ${{ runner.os }}-xrce-client-${{ hashFiles('Micro-XRCE-DDS-Client/CMakeLists.txt') }}
    #     restore-keys: |
    #       ${{ runner.os }}-xrce-client-

    # - name: Cache Qt5
    #   uses: actions/cache@v3
    #   with:
    #     path: /usr/lib/x86_64-linux-gnu
    #     key: ${{ runner.os }}-qt5-${{ hashFiles('/usr/lib/x86_64-linux-gnu/*') }}
    #     restore-keys: |
    #       ${{ runner.os }}-qt5-

    ## NO NEED TO BUILD AGENT (TAKES FUCKING AEGIS TO BUILD)
    # - name: Install Micro XRCE-DDS Agent
    #   if: steps.cache-micro-xrce-dds-agent.outputs.cache-hit != 'true'
    #   run: |
    #     git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
    #     cd Micro-XRCE-DDS-Agent
    #     mkdir build && cd build
    #     cmake ..
    #     make
    #     sudo make install

    - name: Install Qt5
      run: |
        sudo apt-get install -y qtbase5-dev qt5-qmake qml-module-qtquick-controls2 qtdeclarative5-dev

    - name: Install Micro-CDR
      run: |
        git clone https://github.com/eProsima/Micro-CDR
        cd Micro-CDR
        mkdir build && cd build
        cmake ..
        make
        sudo make install

    - name: Install Micro XRCE-DDS Client
      run: |
        git clone https://github.com/eProsima/Micro-XRCE-DDS-Client.git
        cd Micro-XRCE-DDS-Client
        mkdir build && cd build
        cmake ..
        make
        sudo make install
        sudo ldconfig /usr/local/lib/

    # - name: Cache CMake files
    #   uses: actions/cache@v3
    #   with:
    #     path: build
    #     key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}
    #     restore-keys: |
    #       ${{ runner.os }}-cmake-

    # - name: Check installed packages
    #   run: |
    #     ls -l /usr/local/lib | grep microcdr
    #     ls -l /usr/local/bin | grep MicroXRCEAgent

  build:
    needs: setup-environment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure the project
      run: cmake -S . -B build

    - name: Build the project
      run: cmake --build build --config Release

  analyze:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Perform CodeQL Analysis
      run: |
        codeql database create --language=cpp --output=codeql-db
        codeql database analyze codeql-db --format=sarif-latest --output=codeql-analysis.sarif

  format:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Clang-Format
      run: sudo apt-get install -y clang-format

    - name: Format code
      run: clang-format -i **/*.cpp **/*.h

    - name: Check for formatting issues
      run: git diff --exit-code
